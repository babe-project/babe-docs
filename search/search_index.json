{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"_babe: basic architecture for browser experiments A quick start guide can be found here . _babe consists of a front and a backend. Front end Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. Nunc rutrum turpis sed pede. Sed bibendum. Nulla posuere. Praesent augue. Fusce commodo. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean in sem ac leo mollis blandit. Nunc eleifend leo vitae magna. Nullam libero mauris, consequat quis, varius et, dictum id, arcu. Donec posuere augue in quam. Back end Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. Nunc rutrum turpis sed pede. Sed bibendum. Nulla posuere. Praesent augue. Fusce commodo. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean in sem ac leo mollis blandit. Nunc eleifend leo vitae magna. Nullam libero mauris, consequat quis, varius et, dictum id, arcu. Donec posuere augue in quam.","title":"_babe: basic architecture for browser experiments"},{"location":"#_babe-basic-architecture-for-browser-experiments","text":"A quick start guide can be found here . _babe consists of a front and a backend.","title":"_babe: basic architecture for browser experiments"},{"location":"#front-end","text":"Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. Nunc rutrum turpis sed pede. Sed bibendum. Nulla posuere. Praesent augue. Fusce commodo. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean in sem ac leo mollis blandit. Nunc eleifend leo vitae magna. Nullam libero mauris, consequat quis, varius et, dictum id, arcu. Donec posuere augue in quam.","title":"Front end"},{"location":"#back-end","text":"Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. Nunc rutrum turpis sed pede. Sed bibendum. Nulla posuere. Praesent augue. Fusce commodo. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean in sem ac leo mollis blandit. Nunc eleifend leo vitae magna. Nullam libero mauris, consequat quis, varius et, dictum id, arcu. Donec posuere augue in quam.","title":"Back end"},{"location":"about/","text":"","title":"About"},{"location":"basics/","text":"","title":"Experiments (basics)"},{"location":"complex/","text":"","title":"Complex experiments"},{"location":"installation/","text":"Installation guide Experiments Server app The _babe server app can be hosted on any hosting service or your own server. We here describe the process for installation on Heroku . Heroku makes it easy to deploy an web app without having to manually manage the infrastructure. It has a free starter tier, which should be sufficient for the purpose of running experiments. There is an official guide on how to deploy the Phoenix framework on Heroku. The deployment procedure is based on this guide, but differs in some places. {:start=\"0\"} 0. Ensure that you have the Phoenix Framework installed and working. However, if you just want to deploy this server and do no development work/change on it at all, you may skip this step. Ensure that you have a Heroku account already, and have the Heroku CLI installed and working on your computer. Ensure you have Git installed. Clone this git repo with git clone https://github.com/babe-project/BABE or git clone git@github.com:babe-project/BABE.git . cd into the project directory just cloned from your Terminal (or cmd.exe on Windows). Run heroku create --buildpack \"https://github.com/HashNuke/heroku-buildpack-elixir.git\" Run heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git (N.B.: Although the command line output tells you to run git push heroku master , don't do it yet.) You may want to change the application name instead of using the default name. In that case, run heroku apps:rename newname . Edit line 17 of the file config/prod.exs . Replace the part babe-backend.herokuapp.com after host with the app name (shown when you first ran heroku create , e.g. mysterious-meadow-6277.herokuapp.com , or the app name that you set at step 6, e.g. newname.herokuapp.com ). You shouldn't need to modify anything else. Ensure that you're at the top-level project directory. Run heroku addons:create heroku-postgresql:hobby-dev heroku config:set POOL_SIZE=18 Run mix deps.get then mix phx.gen.secret . Then run heroku config:set SECRET_KEY_BASE=\"OUTPUT\" , where OUTPUT should be the output of the mix phx.gen.secret step. Note: If you don't have the Phoenix framework installed on your computer, you may choose to use some other random generator for this task, which essentially asks for a random 64-character secret. On Mac and Linux, you may run openssl rand -base64 64 . Or you may use an online password generator such as the one offered by LastPass . Run git add config/prod.exs , then git commit -m \"Set app URL\" . Don't forget to set the environment variables AUTH_USERNAME and AUTH_PASSWORD , either in the Heroku web interface or via the command line, i.e. heroku config:set AUTH_USERNAME=\"your_username\" heroku config:set AUTH_PASSWORD=\"your_password\" Run git push heroku master . This will push the repo to the git remote at Heroku (instead of the original remote at Github), and deploy the app. Run heroku run \"POOL_SIZE=2 mix ecto.migrate\" Now, heroku open should open the frontpage of the app.","title":"Installation guide"},{"location":"installation/#installation-guide","text":"","title":"Installation guide"},{"location":"installation/#experiments","text":"","title":"Experiments"},{"location":"installation/#server-app","text":"The _babe server app can be hosted on any hosting service or your own server. We here describe the process for installation on Heroku . Heroku makes it easy to deploy an web app without having to manually manage the infrastructure. It has a free starter tier, which should be sufficient for the purpose of running experiments. There is an official guide on how to deploy the Phoenix framework on Heroku. The deployment procedure is based on this guide, but differs in some places. {:start=\"0\"} 0. Ensure that you have the Phoenix Framework installed and working. However, if you just want to deploy this server and do no development work/change on it at all, you may skip this step. Ensure that you have a Heroku account already, and have the Heroku CLI installed and working on your computer. Ensure you have Git installed. Clone this git repo with git clone https://github.com/babe-project/BABE or git clone git@github.com:babe-project/BABE.git . cd into the project directory just cloned from your Terminal (or cmd.exe on Windows). Run heroku create --buildpack \"https://github.com/HashNuke/heroku-buildpack-elixir.git\" Run heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git (N.B.: Although the command line output tells you to run git push heroku master , don't do it yet.) You may want to change the application name instead of using the default name. In that case, run heroku apps:rename newname . Edit line 17 of the file config/prod.exs . Replace the part babe-backend.herokuapp.com after host with the app name (shown when you first ran heroku create , e.g. mysterious-meadow-6277.herokuapp.com , or the app name that you set at step 6, e.g. newname.herokuapp.com ). You shouldn't need to modify anything else. Ensure that you're at the top-level project directory. Run heroku addons:create heroku-postgresql:hobby-dev heroku config:set POOL_SIZE=18 Run mix deps.get then mix phx.gen.secret . Then run heroku config:set SECRET_KEY_BASE=\"OUTPUT\" , where OUTPUT should be the output of the mix phx.gen.secret step. Note: If you don't have the Phoenix framework installed on your computer, you may choose to use some other random generator for this task, which essentially asks for a random 64-character secret. On Mac and Linux, you may run openssl rand -base64 64 . Or you may use an online password generator such as the one offered by LastPass . Run git add config/prod.exs , then git commit -m \"Set app URL\" . Don't forget to set the environment variables AUTH_USERNAME and AUTH_PASSWORD , either in the Heroku web interface or via the command line, i.e. heroku config:set AUTH_USERNAME=\"your_username\" heroku config:set AUTH_PASSWORD=\"your_password\" Run git push heroku master . This will push the repo to the git remote at Heroku (instead of the original remote at Github), and deploy the app. Run heroku run \"POOL_SIZE=2 mix ecto.migrate\" Now, heroku open should open the frontpage of the app.","title":"Server app"},{"location":"server_app/","text":"Installation Installation on Heroku The _babe server app can be hosted on any hosting service or your own server. We here describe the process for installation on Heroku . Heroku makes it easy to deploy an web app without having to manually manage the infrastructure. It has a free starter tier, which should be sufficient for the purpose of running experiments. There is an official guide on how to deploy the Phoenix framework on Heroku. The deployment procedure is based on this guide, but differs in some places. {:start=\"0\"} 0. Ensure that you have the Phoenix Framework installed and working. However, if you just want to deploy this server and do no development work/change on it at all, you may skip this step. Ensure that you have a Heroku account already, and have the Heroku CLI installed and working on your computer. Ensure you have Git installed. Clone this git repo with git clone https://github.com/babe-project/BABE or git clone git@github.com:babe-project/BABE.git . cd into the project directory just cloned from your Terminal (or cmd.exe on Windows). Run heroku create --buildpack \"https://github.com/HashNuke/heroku-buildpack-elixir.git\" Run heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git (N.B.: Although the command line output tells you to run git push heroku master , don't do it yet.) You may want to change the application name instead of using the default name. In that case, run heroku apps:rename newname . Edit line 17 of the file config/prod.exs . Replace the part babe-backend.herokuapp.com after host with the app name (shown when you first ran heroku create , e.g. mysterious-meadow-6277.herokuapp.com , or the app name that you set at step 6, e.g. newname.herokuapp.com ). You shouldn't need to modify anything else. Ensure that you're at the top-level project directory. Run heroku addons:create heroku-postgresql:hobby-dev heroku config:set POOL_SIZE=18 Run mix deps.get then mix phx.gen.secret . Then run heroku config:set SECRET_KEY_BASE=\"OUTPUT\" , where OUTPUT should be the output of the mix phx.gen.secret step. Note: If you don't have the Phoenix framework installed on your computer, you may choose to use some other random generator for this task, which essentially asks for a random 64-character secret. On Mac and Linux, you may run openssl rand -base64 64 . Or you may use an online password generator such as the one offered by LastPass . Run git add config/prod.exs , then git commit -m \"Set app URL\" . Don't forget to set the environment variables AUTH_USERNAME and AUTH_PASSWORD , either in the Heroku web interface or via the command line, i.e. heroku config:set AUTH_USERNAME=\"your_username\" heroku config:set AUTH_PASSWORD=\"your_password\" Run git push heroku master . This will push the repo to the git remote at Heroku (instead of the original remote at Github), and deploy the app. Run heroku run \"POOL_SIZE=2 mix ecto.migrate\" Now, heroku open should open the frontpage of the app. Installation locally The first-time installation requires an internet connection. After it is finished, the server can be launched offline. (Note that for local deployment, the default username is default and the default password is password . You can change them in config/dev.exs .) First time installation To begin with, install Docker from https://docs.docker.com/install/ . You may have to launch the application once in order to let it install its command line tools. Verify the installation by typing docker version in a terminal (e.g., the Terminal app on MacOS or cmd.exe on Windows). Note: - Although the Docker app on Windows and Mac asks for login credentials to Docker Hub, they are not needed for local deployment. You can proceed without creating any Docker account/logging in. - Linux users would need to install docker-compose separately. See relevant instructions here . Once you have Docker installed, follow these steps: Ensure you have Git installed. Clone the server repo with git clone https://github.com/babe-project/BABE.git or git clone git@github.com:babe-project/BABE.git . Open a terminal (e.g., the Terminal app on MacOS or cmd.exe on Windows), cd into the project directory just cloned via git. For the first-time setup, run in the terminal docker volume create --name babe-app-volume -d local docker volume create --name babe-db-volume -d local docker-compose run --rm web bash -c \"mix deps.get && npm install && node node_modules/brunch/bin/brunch build && mix ecto.migrate\" Deployment After first-time installation, you can launch a local server instance which allows you to manage the experiments in your browser and stores the results. Run docker-compose up to launch the application every time you want to run the server. Wait until the line web_1 | [info] Running BABE.Endpoint with Cowboy using http://0.0.0.0:4000 appears in the terminal. Visit localhost:4000 in your browser. You should see the server up and running. Note: Windows 7 users who installed Docker Machine might need to find out the IP address used by docker-machine instead of localhost . See Docker documentation for details. Use Ctrl + C to shut down the server. Note that the database for storing experiment results is stored at /var/lib/docker/volumes/babe-db-volume/_data folder by default. As long as this folder is preserved, experiment results should persist as well. Using the server app After installation you can visit the server app in a browser, with the username and password you previously specified. For Heroku deployment, you may do so by running heroku open in the command line or find the app URL in your Heroku account. For local deployment, the URL is by default http://localhost:4000. The server app shows a list of experiments whose data may be stored in a database. It shows the experiments ID, its name, its author, the number of submissions retrieved so far, date information, as well as whether the experiment is currently active or not. If an experiment is set to be active, it allows further submissions to be recorded in the database. The server app allows you to retrieve the data for an experiment from the database. Simply click on the button \"Retrieve CSV\" to download a CSV-file with the data collected so far. To delete an experiment, click the \"Delete\" button. Always make sure that you have recovered all necessary data from that experiment; otherwise your data collected so far might be irrevocably lost. You can also edit an experiment with the \"Edit\" button. You can change information about the experiment on the edit-screen. You can also toggle whether the experiment is active or not. You can set a maximum number of submissions after which the experiment automatically toggles its activity status off. Any submission made by a participant to a non-active experiment is just lost and will not be recorded. This is to protect your database from pollution or attacks, but if used unwisely could also cause you loss of relevant data. Finally, the server app allows you to create and manage new experiments. Click on the \"New\" button to do this. The interface for creating a new experiment is parallel to editing an existing experiment. Importantly, you need to give some required information about a new experiment (name and author). If you want to use dynamic retrieval of experiment data (documented here ), you must specify which fields should be available to be retrieved by your API calls. This allows you to expose only the relevant fields, since the dynamic retrieval API is not password protected by default.","title":"Server app"},{"location":"server_app/#installation","text":"","title":"Installation"},{"location":"server_app/#installation-on-heroku","text":"The _babe server app can be hosted on any hosting service or your own server. We here describe the process for installation on Heroku . Heroku makes it easy to deploy an web app without having to manually manage the infrastructure. It has a free starter tier, which should be sufficient for the purpose of running experiments. There is an official guide on how to deploy the Phoenix framework on Heroku. The deployment procedure is based on this guide, but differs in some places. {:start=\"0\"} 0. Ensure that you have the Phoenix Framework installed and working. However, if you just want to deploy this server and do no development work/change on it at all, you may skip this step. Ensure that you have a Heroku account already, and have the Heroku CLI installed and working on your computer. Ensure you have Git installed. Clone this git repo with git clone https://github.com/babe-project/BABE or git clone git@github.com:babe-project/BABE.git . cd into the project directory just cloned from your Terminal (or cmd.exe on Windows). Run heroku create --buildpack \"https://github.com/HashNuke/heroku-buildpack-elixir.git\" Run heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git (N.B.: Although the command line output tells you to run git push heroku master , don't do it yet.) You may want to change the application name instead of using the default name. In that case, run heroku apps:rename newname . Edit line 17 of the file config/prod.exs . Replace the part babe-backend.herokuapp.com after host with the app name (shown when you first ran heroku create , e.g. mysterious-meadow-6277.herokuapp.com , or the app name that you set at step 6, e.g. newname.herokuapp.com ). You shouldn't need to modify anything else. Ensure that you're at the top-level project directory. Run heroku addons:create heroku-postgresql:hobby-dev heroku config:set POOL_SIZE=18 Run mix deps.get then mix phx.gen.secret . Then run heroku config:set SECRET_KEY_BASE=\"OUTPUT\" , where OUTPUT should be the output of the mix phx.gen.secret step. Note: If you don't have the Phoenix framework installed on your computer, you may choose to use some other random generator for this task, which essentially asks for a random 64-character secret. On Mac and Linux, you may run openssl rand -base64 64 . Or you may use an online password generator such as the one offered by LastPass . Run git add config/prod.exs , then git commit -m \"Set app URL\" . Don't forget to set the environment variables AUTH_USERNAME and AUTH_PASSWORD , either in the Heroku web interface or via the command line, i.e. heroku config:set AUTH_USERNAME=\"your_username\" heroku config:set AUTH_PASSWORD=\"your_password\" Run git push heroku master . This will push the repo to the git remote at Heroku (instead of the original remote at Github), and deploy the app. Run heroku run \"POOL_SIZE=2 mix ecto.migrate\" Now, heroku open should open the frontpage of the app.","title":"Installation on Heroku"},{"location":"server_app/#installation-locally","text":"The first-time installation requires an internet connection. After it is finished, the server can be launched offline. (Note that for local deployment, the default username is default and the default password is password . You can change them in config/dev.exs .)","title":"Installation locally"},{"location":"server_app/#first-time-installation","text":"To begin with, install Docker from https://docs.docker.com/install/ . You may have to launch the application once in order to let it install its command line tools. Verify the installation by typing docker version in a terminal (e.g., the Terminal app on MacOS or cmd.exe on Windows). Note: - Although the Docker app on Windows and Mac asks for login credentials to Docker Hub, they are not needed for local deployment. You can proceed without creating any Docker account/logging in. - Linux users would need to install docker-compose separately. See relevant instructions here . Once you have Docker installed, follow these steps: Ensure you have Git installed. Clone the server repo with git clone https://github.com/babe-project/BABE.git or git clone git@github.com:babe-project/BABE.git . Open a terminal (e.g., the Terminal app on MacOS or cmd.exe on Windows), cd into the project directory just cloned via git. For the first-time setup, run in the terminal docker volume create --name babe-app-volume -d local docker volume create --name babe-db-volume -d local docker-compose run --rm web bash -c \"mix deps.get && npm install && node node_modules/brunch/bin/brunch build && mix ecto.migrate\"","title":"First time installation"},{"location":"server_app/#deployment","text":"After first-time installation, you can launch a local server instance which allows you to manage the experiments in your browser and stores the results. Run docker-compose up to launch the application every time you want to run the server. Wait until the line web_1 | [info] Running BABE.Endpoint with Cowboy using http://0.0.0.0:4000 appears in the terminal. Visit localhost:4000 in your browser. You should see the server up and running. Note: Windows 7 users who installed Docker Machine might need to find out the IP address used by docker-machine instead of localhost . See Docker documentation for details. Use Ctrl + C to shut down the server. Note that the database for storing experiment results is stored at /var/lib/docker/volumes/babe-db-volume/_data folder by default. As long as this folder is preserved, experiment results should persist as well.","title":"Deployment"},{"location":"server_app/#using-the-server-app","text":"After installation you can visit the server app in a browser, with the username and password you previously specified. For Heroku deployment, you may do so by running heroku open in the command line or find the app URL in your Heroku account. For local deployment, the URL is by default http://localhost:4000. The server app shows a list of experiments whose data may be stored in a database. It shows the experiments ID, its name, its author, the number of submissions retrieved so far, date information, as well as whether the experiment is currently active or not. If an experiment is set to be active, it allows further submissions to be recorded in the database. The server app allows you to retrieve the data for an experiment from the database. Simply click on the button \"Retrieve CSV\" to download a CSV-file with the data collected so far. To delete an experiment, click the \"Delete\" button. Always make sure that you have recovered all necessary data from that experiment; otherwise your data collected so far might be irrevocably lost. You can also edit an experiment with the \"Edit\" button. You can change information about the experiment on the edit-screen. You can also toggle whether the experiment is active or not. You can set a maximum number of submissions after which the experiment automatically toggles its activity status off. Any submission made by a participant to a non-active experiment is just lost and will not be recorded. This is to protect your database from pollution or attacks, but if used unwisely could also cause you loss of relevant data. Finally, the server app allows you to create and manage new experiments. Click on the \"New\" button to do this. The interface for creating a new experiment is parallel to editing an existing experiment. Importantly, you need to give some required information about a new experiment (name and author). If you want to use dynamic retrieval of experiment data (documented here ), you must specify which fields should be available to be retrieved by your API calls. This allows you to expose only the relevant fields, since the dynamic retrieval API is not password protected by default.","title":"Using the server app"}]}