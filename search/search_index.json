{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"_babe: basic architecture for browser experiments A quick start guide can be found here . _babe consists of a front and a backend. Front end Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. Nunc rutrum turpis sed pede. Sed bibendum. Nulla posuere. Praesent augue. Fusce commodo. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean in sem ac leo mollis blandit. Nunc eleifend leo vitae magna. Nullam libero mauris, consequat quis, varius et, dictum id, arcu. Donec posuere augue in quam. Back end Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. Nunc rutrum turpis sed pede. Sed bibendum. Nulla posuere. Praesent augue. Fusce commodo. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean in sem ac leo mollis blandit. Nunc eleifend leo vitae magna. Nullam libero mauris, consequat quis, varius et, dictum id, arcu. Donec posuere augue in quam.","title":"_babe: basic architecture for browser experiments"},{"location":"#_babe-basic-architecture-for-browser-experiments","text":"A quick start guide can be found here . _babe consists of a front and a backend.","title":"_babe: basic architecture for browser experiments"},{"location":"#front-end","text":"Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. Nunc rutrum turpis sed pede. Sed bibendum. Nulla posuere. Praesent augue. Fusce commodo. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean in sem ac leo mollis blandit. Nunc eleifend leo vitae magna. Nullam libero mauris, consequat quis, varius et, dictum id, arcu. Donec posuere augue in quam.","title":"Front end"},{"location":"#back-end","text":"Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. Nunc rutrum turpis sed pede. Sed bibendum. Nulla posuere. Praesent augue. Fusce commodo. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean in sem ac leo mollis blandit. Nunc eleifend leo vitae magna. Nullam libero mauris, consequat quis, varius et, dictum id, arcu. Donec posuere augue in quam.","title":"Back end"},{"location":"04_development/","text":"To get the development version of the _babe package, clone this repository and install the dependencies by running npm install in the terminal. Workflow branches: master - Current stable version. development - Development version. This is where new featues or bug fixes are pushed. When the version is stable, the branch is merged into master. (1) Source files src/ babe-canvas.js babe-errors.js babe-init.js babe-progress-bar.js babe-submit.js babe-utils.js babe-views.js babe.css (2) Create babe.js and babe.full.js Option 1: Build the _babe package files while developing Use npm run watch command from the babe-project folder to start a process which watches for changes in the files in src and builds (updates) babe.js and babe.full.js . This commands builds both babe.js and babe.full.js when a file in src is saved. Option 2: Make changes to the files and then build the _babe files Run npm run concat from the babe-project folder. This command builds both babe.js and babe.full.js . (3) Merge into master include a changelog information in the README merge to master update the version of _babe in package.json (4) Publish to npm Run npm publish from the babe-project folder to publish the new version of _babe.","title":"Development"},{"location":"04_development/#workflow","text":"branches: master - Current stable version. development - Development version. This is where new featues or bug fixes are pushed. When the version is stable, the branch is merged into master.","title":"Workflow"},{"location":"04_development/#1-source-files","text":"src/ babe-canvas.js babe-errors.js babe-init.js babe-progress-bar.js babe-submit.js babe-utils.js babe-views.js babe.css","title":"(1) Source files"},{"location":"04_development/#2-create-babejs-and-babefulljs","text":"","title":"(2) Create babe.js and babe.full.js"},{"location":"04_development/#option-1-build-the-95babe-package-files-while-developing","text":"Use npm run watch command from the babe-project folder to start a process which watches for changes in the files in src and builds (updates) babe.js and babe.full.js . This commands builds both babe.js and babe.full.js when a file in src is saved.","title":"Option 1: Build the _babe package files while developing"},{"location":"04_development/#option-2-make-changes-to-the-files-and-then-build-the-95babe-files","text":"Run npm run concat from the babe-project folder. This command builds both babe.js and babe.full.js .","title":"Option 2: Make changes to the files and then build the _babe files"},{"location":"04_development/#3-merge-into-master","text":"include a changelog information in the README merge to master update the version of _babe in package.json","title":"(3) Merge into master"},{"location":"04_development/#4-publish-to-npm","text":"Run npm publish from the babe-project folder to publish the new version of _babe.","title":"(4) Publish to npm"},{"location":"05_about/","text":"","title":"About"},{"location":"01_designing_experiments/01_views/","text":"... coming soon ... general information about the design of a _babe experiment There are two types of views: trial type and wrapping views. _babe provides a number of templates to create views with a pre-given structure.","title":"Overview"},{"location":"01_designing_experiments/02_template_views/","text":"","title":"02 template views"},{"location":"01_designing_experiments/02a_wrapping_views/","text":"Wrapping views are short, usually one-trial views that structure your experiment. They can provide a welcome message, instructions or collect post-survey data. The most important wrapping view is the thanks view. The thanks view must always be included in your experiment because it wraps up and processes the data collected during the experiment. Intro view Instantiate with babeViews.intro . Optional fields: buttonText: string the text of the button that takes the participant to the next view default: 'Next' title: string the title of the view default: 'Welcome!' text: string the text of the view default: there is no default Instructions view Instantiate with babeViews.instructions . Optional fields: buttonText: string the text of the button that takes the participant to the next view default: 'Next' title: string the title of the view default: 'Instructions' text: string the text of the view default: there is no default Begin view Instantiate with babeViews.begin . Optional fields: buttonText: string the text of the button that takes the participant to the next view default: 'Next' title: string the title of the view default: 'Begin' text: string the text of the view default: there is no default PostTest view Instantiate with babeViews.postTest . Optional fields: buttonText: string the text of the button that takes the participant to the next view default: 'Next' title: string the title of the view default: 'Additional Information' text: string the text of the view default: there is no default age_question: string question about participant's age default: 'Age', gender_question: string question about participant's gender default: 'Gender' gender_male: string answer option for the gender question default: 'male' gender_female: string answer option for the gender question default: 'female' gender_other: string answer option for the gender question default: 'other' edu_question: string question about participant's level of education default: 'Level of Education' edu_graduated_high_school: string answer option for the education question default: 'Graduated High School' edu_graduated_college: string answer option for the education question default: 'Graduated College' edu_higher_degree: string answer option for the education question default: 'Higher Degree' languages_question: string question about participant's native languages default: 'Native Languages' languages_more: string more info about what native languages are default: '(i.e. the language(s) spoken at home when you were a child)' Thanks view Instantiate with babeViews.thanks . The thanks view must always be included in your experiment because it wraps up and processes the data collected during the experiment. Optional fields: title: string the title of the view default: 'Thank you for taking part in this experiment!' prolificConfirmText: string text asking the participant to press the 'confirm' button default: 'Please press the button below to confirm that you completed the experiment with Prolific'","title":"Wrapping views"},{"location":"01_designing_experiments/02a_wrapping_views/#intro-view","text":"Instantiate with babeViews.intro . Optional fields: buttonText: string the text of the button that takes the participant to the next view default: 'Next' title: string the title of the view default: 'Welcome!' text: string the text of the view default: there is no default","title":"Intro view"},{"location":"01_designing_experiments/02a_wrapping_views/#instructions-view","text":"Instantiate with babeViews.instructions . Optional fields: buttonText: string the text of the button that takes the participant to the next view default: 'Next' title: string the title of the view default: 'Instructions' text: string the text of the view default: there is no default","title":"Instructions view"},{"location":"01_designing_experiments/02a_wrapping_views/#begin-view","text":"Instantiate with babeViews.begin . Optional fields: buttonText: string the text of the button that takes the participant to the next view default: 'Next' title: string the title of the view default: 'Begin' text: string the text of the view default: there is no default","title":"Begin view"},{"location":"01_designing_experiments/02a_wrapping_views/#posttest-view","text":"Instantiate with babeViews.postTest . Optional fields: buttonText: string the text of the button that takes the participant to the next view default: 'Next' title: string the title of the view default: 'Additional Information' text: string the text of the view default: there is no default age_question: string question about participant's age default: 'Age', gender_question: string question about participant's gender default: 'Gender' gender_male: string answer option for the gender question default: 'male' gender_female: string answer option for the gender question default: 'female' gender_other: string answer option for the gender question default: 'other' edu_question: string question about participant's level of education default: 'Level of Education' edu_graduated_high_school: string answer option for the education question default: 'Graduated High School' edu_graduated_college: string answer option for the education question default: 'Graduated College' edu_higher_degree: string answer option for the education question default: 'Higher Degree' languages_question: string question about participant's native languages default: 'Native Languages' languages_more: string more info about what native languages are default: '(i.e. the language(s) spoken at home when you were a child)'","title":"PostTest view"},{"location":"01_designing_experiments/02a_wrapping_views/#thanks-view","text":"Instantiate with babeViews.thanks . The thanks view must always be included in your experiment because it wraps up and processes the data collected during the experiment. Optional fields: title: string the title of the view default: 'Thank you for taking part in this experiment!' prolificConfirmText: string text asking the participant to press the 'confirm' button default: 'Please press the button below to confirm that you completed the experiment with Prolific'","title":"Thanks view"},{"location":"01_designing_experiments/02b_trial_views/","text":"Trial views are the parts of your experiment which are (usually) instantiated several times (realizing different trials of your, say, main experimental task). They usually collect the data and often rely on additional information (e.g., the picture to be displayed in trial 27, or the question and answer options for trial 13). All trial views have three obligatory fields : trials: int - the number of trials this view will appear name: string - the name of the view data: array - list of objects, each with information for each consecutive trial Different types of wrapping views have more optional fields, as documented below. Forced-choice task Instantiate with babeView.forcedChoice . Displays a context, a picture and a question to be answered in a two-alternative forced choice task. Choices are made by clicking on one of two buttons. Obligatory Fields option1: string - text on button for option 1 option2: string - text on button for option 2 Optional Fields question: string - question to be asked QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) - picture to be displayed Sample data const forced_choice_trials = [ { picture: \"path/to/picture_of_questionmark.jpg\", question: \"What's the weather like? like?\", option1: \"shiny\", option2: \"rainbow\" } ]; Sentence Choice task Instantiate with babeViews.sentenceChoice . Similar to the forcedChoice view, this view presents two text-based options to click on. This view, however, realizes options on longer buttons arranged vertically. This is better for choice between several longer expressions, like whole sentences. Obligatory Fields option1: string option2: string Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) question: string Sample data const sentence_choice_trials = [ { picture: 'path/to/picture_of_bread.jpg', question: \"What's on the bread?\", option1: 'jam', option2: 'ham' }, { picture: 'path/to/picture_of_bread.jpg', option1: 'jam', option2: 'ham' }, { question: \"What's the weather like?\", option1: 'shiny', option2: 'rainbow' } ]; Image Selection task Instantiate with babeViews.imageSelection . Realizes another 2-alternative forced choice task, by presenting two pictures (arranged horizontally) and requiring a click on one of the pictures. Obligatory Fields option1: string - label for choice of picture 1 (stored in response variable) option2: string - label for choice of picture 2 (stored in response variable) picture1: string (link) - refers to option1 picture2: string (link) - refers to option2 Optional Fields QUD: string - text that is always present on the slide question: string canvas: object - more about babe canvas Sample data const image_selection_trials = [ { picture1: 'path/to/picture1.jpg', picture2: 'path/to/picture2.jpg', option1: 'yes', option2: 'no' }, { picture1: 'path/to/picture_of_bread1.jpg', picture2: 'path/to/picture_of_bread2.jpg', question: \"What's on the bread?\", option1: 'jam', option2: 'ham' } ]; Textbox Input task Instantiate with babeViews.textboxInput . Requires users to type in text freely in a textbox. Allows to specify a minimum number of characters before the next button appears. Obligatory Fields question: string - question to answer Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) - picture to be displayed min_chars: number the minumum number of characters in the textarea field before the next button appears default - 10 Sample data const textbox_input_trials = [ { picture: \"path/to/picture.jpg\", question: \"How are you today?\", min_chars: 100 }, { question: \"What's the weather like? like?\", min_chars: 50 } ]; Slider Rating task Instantiate with babeViews.sliderRating . Gives you a single (horizontally oriented) slider, with endpoints whose labels can be specified. The next button only appears when the slider is clicked on or moved at least once. Internally slider values are represented as ranging from 0 to 100 in steps of 1. Obligatory Fields optionLeft: string optionRight: string Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) question: string Sample data const slider_rating_trials = [ { picture: 'path/to/picture_of_bread.jpg', question: \"What's on the bread?\", optionLeft: 'jam', optionRight: 'ham' }, { question: \"What's the weather like? like?\", optionLeft: 'shiny', optionRight: 'rainbow' } ]; Dropdown Choice task Instantiate with babeViews.dropdownChoice . Prompts the user to select one option from a drop-down menu, which can be embedded into a sentence, e.g., to fill in a word or phrase in a fixed sentence frame. Obligatory Fields option1: string option2: string Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) question_left_part: string question_right_part: string Sample data const dropdown_choice_trials = [ { picture: 'path/to/picture_of_bread.jpg', question: \"What's on the bread?\", option1: 'jam', option2: 'ham' }, { question: \"What's the weather like?\", option1: 'shiny', option2: 'rainbow' } ]; Rating Scale task Instantiate with babeViews.ratingScale . Realizes a Likert-scale (ordinal) rating task, with button labeled with consecutive numbers. Participants click on these numbered buttons to proceed. Allows labels for endpoints on the scale. Obligatory Fields optionLeft: string optionRight: string Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) question: string Sample data const rating_scale_trials = [ { picture: 'path/to/picture_of_bread.jpg', question: \"What's on the bread?\", option1: 'jam', option2: 'ham' }, { question: \"What's the weather like?\", option1: 'shiny', option2: 'rainbow' } ]; Key Press task Instantiate with babeViews.keyPress . Offers a 2-alternative forced choice task where choice options are given by pressing keys on the keyboard. Ideal for more accurate reaction time measurements. Obligatory Fields key1: string - single character string specifying which key to use for option 1 key2: string - single character string specifying which key to use for option 2 <key-specified in key1, e.g. f>: string - option 1 corresponding to first key <key specified in key2, e.g. j>: string - option 2 corresponding to second key expected: string - which option is the correct or expected one Optional Fields question: string picture: string (link) canvas: object - more about babe canvas Sample data const key_press_trials = [ { question: \"What's the weather like? like?\", key1: 'f', key2: 'j', f: 'shiny', j: 'rainbow', expected: 'shiny' }, { question: \"What's on the bread?\", picture: 'path/to/picture.jpg', key1: 'f', key2: 'j', f: 'ham', j: 'jam', expected: 'jam' } ];","title":"Trial views"},{"location":"01_designing_experiments/02b_trial_views/#forced-choice-task","text":"Instantiate with babeView.forcedChoice . Displays a context, a picture and a question to be answered in a two-alternative forced choice task. Choices are made by clicking on one of two buttons. Obligatory Fields option1: string - text on button for option 1 option2: string - text on button for option 2 Optional Fields question: string - question to be asked QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) - picture to be displayed Sample data const forced_choice_trials = [ { picture: \"path/to/picture_of_questionmark.jpg\", question: \"What's the weather like? like?\", option1: \"shiny\", option2: \"rainbow\" } ];","title":"Forced-choice task"},{"location":"01_designing_experiments/02b_trial_views/#sentence-choice-task","text":"Instantiate with babeViews.sentenceChoice . Similar to the forcedChoice view, this view presents two text-based options to click on. This view, however, realizes options on longer buttons arranged vertically. This is better for choice between several longer expressions, like whole sentences. Obligatory Fields option1: string option2: string Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) question: string Sample data const sentence_choice_trials = [ { picture: 'path/to/picture_of_bread.jpg', question: \"What's on the bread?\", option1: 'jam', option2: 'ham' }, { picture: 'path/to/picture_of_bread.jpg', option1: 'jam', option2: 'ham' }, { question: \"What's the weather like?\", option1: 'shiny', option2: 'rainbow' } ];","title":"Sentence Choice task"},{"location":"01_designing_experiments/02b_trial_views/#image-selection-task","text":"Instantiate with babeViews.imageSelection . Realizes another 2-alternative forced choice task, by presenting two pictures (arranged horizontally) and requiring a click on one of the pictures. Obligatory Fields option1: string - label for choice of picture 1 (stored in response variable) option2: string - label for choice of picture 2 (stored in response variable) picture1: string (link) - refers to option1 picture2: string (link) - refers to option2 Optional Fields QUD: string - text that is always present on the slide question: string canvas: object - more about babe canvas Sample data const image_selection_trials = [ { picture1: 'path/to/picture1.jpg', picture2: 'path/to/picture2.jpg', option1: 'yes', option2: 'no' }, { picture1: 'path/to/picture_of_bread1.jpg', picture2: 'path/to/picture_of_bread2.jpg', question: \"What's on the bread?\", option1: 'jam', option2: 'ham' } ];","title":"Image Selection task"},{"location":"01_designing_experiments/02b_trial_views/#textbox-input-task","text":"Instantiate with babeViews.textboxInput . Requires users to type in text freely in a textbox. Allows to specify a minimum number of characters before the next button appears. Obligatory Fields question: string - question to answer Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) - picture to be displayed min_chars: number the minumum number of characters in the textarea field before the next button appears default - 10 Sample data const textbox_input_trials = [ { picture: \"path/to/picture.jpg\", question: \"How are you today?\", min_chars: 100 }, { question: \"What's the weather like? like?\", min_chars: 50 } ];","title":"Textbox Input task"},{"location":"01_designing_experiments/02b_trial_views/#slider-rating-task","text":"Instantiate with babeViews.sliderRating . Gives you a single (horizontally oriented) slider, with endpoints whose labels can be specified. The next button only appears when the slider is clicked on or moved at least once. Internally slider values are represented as ranging from 0 to 100 in steps of 1. Obligatory Fields optionLeft: string optionRight: string Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) question: string Sample data const slider_rating_trials = [ { picture: 'path/to/picture_of_bread.jpg', question: \"What's on the bread?\", optionLeft: 'jam', optionRight: 'ham' }, { question: \"What's the weather like? like?\", optionLeft: 'shiny', optionRight: 'rainbow' } ];","title":"Slider Rating task"},{"location":"01_designing_experiments/02b_trial_views/#dropdown-choice-task","text":"Instantiate with babeViews.dropdownChoice . Prompts the user to select one option from a drop-down menu, which can be embedded into a sentence, e.g., to fill in a word or phrase in a fixed sentence frame. Obligatory Fields option1: string option2: string Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) question_left_part: string question_right_part: string Sample data const dropdown_choice_trials = [ { picture: 'path/to/picture_of_bread.jpg', question: \"What's on the bread?\", option1: 'jam', option2: 'ham' }, { question: \"What's the weather like?\", option1: 'shiny', option2: 'rainbow' } ];","title":"Dropdown Choice task"},{"location":"01_designing_experiments/02b_trial_views/#rating-scale-task","text":"Instantiate with babeViews.ratingScale . Realizes a Likert-scale (ordinal) rating task, with button labeled with consecutive numbers. Participants click on these numbered buttons to proceed. Allows labels for endpoints on the scale. Obligatory Fields optionLeft: string optionRight: string Optional Fields QUD: string - text that is always present on the slide canvas: object - more about babe canvas picture: string (link) question: string Sample data const rating_scale_trials = [ { picture: 'path/to/picture_of_bread.jpg', question: \"What's on the bread?\", option1: 'jam', option2: 'ham' }, { question: \"What's the weather like?\", option1: 'shiny', option2: 'rainbow' } ];","title":"Rating Scale task"},{"location":"01_designing_experiments/02b_trial_views/#key-press-task","text":"Instantiate with babeViews.keyPress . Offers a 2-alternative forced choice task where choice options are given by pressing keys on the keyboard. Ideal for more accurate reaction time measurements. Obligatory Fields key1: string - single character string specifying which key to use for option 1 key2: string - single character string specifying which key to use for option 2 <key-specified in key1, e.g. f>: string - option 1 corresponding to first key <key specified in key2, e.g. j>: string - option 2 corresponding to second key expected: string - which option is the correct or expected one Optional Fields question: string picture: string (link) canvas: object - more about babe canvas Sample data const key_press_trials = [ { question: \"What's the weather like? like?\", key1: 'f', key2: 'j', f: 'shiny', j: 'rainbow', expected: 'shiny' }, { question: \"What's on the bread?\", picture: 'path/to/picture.jpg', key1: 'f', key2: 'j', f: 'ham', j: 'jam', expected: 'jam' } ];","title":"Key Press task"},{"location":"01_designing_experiments/02c_SPR/","text":"Self-paced reading with forced choice response Obligatory Fields sentence: string the spr parts are separated by ' | ' option1: string option2: string Optional Fields QUD: string - text that is always present on the slide help_text: string instructions to press SPACE above the spr sentence lines default - Press the SPACE bar to reveal the words picture: string canvas: object - more about babe canvas question: string Sample data const spr_trials = [ { QUD: \"Johnny says: 'I want you to bring me the box where ...\", picture: \"images/all-false3.png\" help_text: 'just press SPACE', question: \"Should you bring Johnny this box or not?\", sentence: \"all | of | the | yellow | marbles | are | inside | the | case.'\", option1: \"Bring it\", option2: \"Leave it\", }, { question: \"Should you bring Johnny this box or not?\", sentence: \"some | of the | black marbles | are | inside | the case.'\", option1: \"Bring it\", option2: \"Leave it\" } ]; Self-paced reading task with rating scale response Obligatory Fields sentence: string the spr parts are separated by ' | ' optionLeft: string optionRight: string Optional Fields QUD: string - text that is always present on the slide help_text: string - SPACE press text above the spr sentence picture: string canvas: object - more about babe canvas question: string const spr_rc_trials = [ { QUD: \"Johnny says: 'I want you to bring me the box where ...\", picture: \"images/all-false3.png\" help_text: 'SPACEEEE', sentence: \"all | of the | yellow marbles | are | inside | the case.'\", question: \"Should you bring Johnny this box or not?\", optionLeft: \"Bring it\", optionRight: \"Leave it\", }, { question: \"Should you bring Johnny this box or not?\", sentence: \"some | of the | black marbles | are | inside | the case.'\", optionLeft: \"Bring it\", optionRight: \"Leave it\" } ];","title":"Self-paced reading"},{"location":"01_designing_experiments/02c_SPR/#self-paced-reading-with-forced-choice-response","text":"Obligatory Fields sentence: string the spr parts are separated by ' | ' option1: string option2: string Optional Fields QUD: string - text that is always present on the slide help_text: string instructions to press SPACE above the spr sentence lines default - Press the SPACE bar to reveal the words picture: string canvas: object - more about babe canvas question: string Sample data const spr_trials = [ { QUD: \"Johnny says: 'I want you to bring me the box where ...\", picture: \"images/all-false3.png\" help_text: 'just press SPACE', question: \"Should you bring Johnny this box or not?\", sentence: \"all | of | the | yellow | marbles | are | inside | the | case.'\", option1: \"Bring it\", option2: \"Leave it\", }, { question: \"Should you bring Johnny this box or not?\", sentence: \"some | of the | black marbles | are | inside | the case.'\", option1: \"Bring it\", option2: \"Leave it\" } ];","title":"Self-paced reading with forced choice response"},{"location":"01_designing_experiments/02c_SPR/#self-paced-reading-task-with-rating-scale-response","text":"Obligatory Fields sentence: string the spr parts are separated by ' | ' optionLeft: string optionRight: string Optional Fields QUD: string - text that is always present on the slide help_text: string - SPACE press text above the spr sentence picture: string canvas: object - more about babe canvas question: string const spr_rc_trials = [ { QUD: \"Johnny says: 'I want you to bring me the box where ...\", picture: \"images/all-false3.png\" help_text: 'SPACEEEE', sentence: \"all | of the | yellow marbles | are | inside | the case.'\", question: \"Should you bring Johnny this box or not?\", optionLeft: \"Bring it\", optionRight: \"Leave it\", }, { question: \"Should you bring Johnny this box or not?\", sentence: \"some | of the | black marbles | are | inside | the case.'\", optionLeft: \"Bring it\", optionRight: \"Leave it\" } ];","title":"Self-paced reading task with rating scale response"},{"location":"01_designing_experiments/03_custom_views/","text":"","title":"Miscellaneous"},{"location":"01_designing_experiments/03_miscellaneous/","text":"Progress bars progress_bar: { in: [ 'forced_choice', // 6 trials 'dropdown_choice' // 10 trials 'slider_rating', // 4 trials ], style: \"default\", width: 120 // 120 pixels } // 20 trials overall, each trial fills 10 pixels (120/20) part of the progress bar progress_bar: { in: [ 'forced_choice', // 6 trials 'dropdown_choice' // 10 trials 'slider_rating', // 4 trials ], style: \"separate\", width: 120 // 120 pixels } // 20 trials overall, each trial fills (120/total trials) pixels part of the progress bar. Each type of view has a separate progress bar. progress_bar: { in: [ 'forced_choice', // 6 trials 'dropdown_choice' // 10 trials 'slider_rating', // 4 trials ], style: \"chunks\", width: 60 // 60 pixels } // 20 trials overall, each trial fills part of its corresponding chunk. Each type of view has a separate progress bar and all progress bars are displayed. Global information","title":"Progress bars"},{"location":"01_designing_experiments/03_miscellaneous/#progress-bars","text":"progress_bar: { in: [ 'forced_choice', // 6 trials 'dropdown_choice' // 10 trials 'slider_rating', // 4 trials ], style: \"default\", width: 120 // 120 pixels } // 20 trials overall, each trial fills 10 pixels (120/20) part of the progress bar progress_bar: { in: [ 'forced_choice', // 6 trials 'dropdown_choice' // 10 trials 'slider_rating', // 4 trials ], style: \"separate\", width: 120 // 120 pixels } // 20 trials overall, each trial fills (120/total trials) pixels part of the progress bar. Each type of view has a separate progress bar. progress_bar: { in: [ 'forced_choice', // 6 trials 'dropdown_choice' // 10 trials 'slider_rating', // 4 trials ], style: \"chunks\", width: 60 // 60 pixels } // 20 trials overall, each trial fills part of its corresponding chunk. Each type of view has a separate progress bar and all progress bars are displayed.","title":"Progress bars"},{"location":"01_designing_experiments/03_miscellaneous/#global-information","text":"","title":"Global information"},{"location":"01_designing_experiments/04_lifecycles_hooks/","text":"All trial views have a fixed life cycle that you can use to manipulate the timing of events during a trial. You can insert custom functions, so-called 'hooks' to massage template views into style. Life cycle All the trial views go through 4 steps. pause step - blank screen enable by passing pause: number (in miliseconds) (will show a pause for after number amount of time) shows nothing but a blank screen and the QUD if there is such fixation point step - a cross in the middle where the stimulus appears passed to the trial view as fix_duration: number (in miliseconds) shows a cross in the middle of the stimulus and the QUD if there is such stimulus shown step - stimulus appears 3.5 (optional) stimulus hidden step - hides the stimulus from the screen * hide the stimulus after certain amount of time by passing stim_duration: number (in miliseconds) to the view creation * hide the stimulus when SPACE gets pressed with stim_duration: 'space' * skip this step by not defining stim_duration interactions are enabled - the participant can interact with the view (respond, read the sentence etc.) The views you created do not need to use these timeouts, however, each trial view still goes through these steps on the background and you can still hook and call locally defined functions Hooks You can create functions in your local js files and hook these functions to the trial view. To understand how hooks work, first learn about babe's trial views lifecycle Hooks after the pause is finished enable with hook.after_pause: _function_ after the fixation point hides enable with hook.after_fix_point: _function_ after the stimulus is shown enable with hook.after_stim_shown: _function_ after the stimulus hides enable with hook.after_stim_hidden: _function_ after the interactions are enabled enable with hook.after_response_enabled: _function_ Your custom functions get the trial data for each trial view and next as arguments. You can use the data if you need to. To proceed to the next step of the lifecycle, you have to call next() Full lifecycle - hook sample pause shows pause finishes after_pause function called fixation point shows fixation point disappears after_fix_point function called stimulus shows after_stim_shown function called stimlus hides after_stim_hidden function called response is enabled after_response_enabled function called Real example Imagine you want to tell the participants whether their repsonse was correct while they are getting familiar with the experiment, for example in the practice trial view. To do that you need to get the answer they chose and check it for correctness. You can define a funciton that gets their response and hook to the trial view after the response is enabled. In the example below, assume that option1 is always the correct answer. // compares the chosen answer to the value of `option1` function checkResponse(data, next) { $('input[name=answer]').on('change', function(e) { if (e.target.value === data.option1) { alert('Your answer is correct! Yey!'); } else { alert('Sorry, this answer is incorrect :('); } next(); }) } and add a after_response_enabled hook to the view: const practice = babeViews.forcedChoice({ trials: 20, name: 'practice', trial_type: 'practice', data: practice_trials.forcedChoice, fix_duration: 500, pause: 500, hook: { after_response_enabled: checkResponse } });","title":"Life cycles & hooks"},{"location":"01_designing_experiments/04_lifecycles_hooks/#life-cycle","text":"All the trial views go through 4 steps. pause step - blank screen enable by passing pause: number (in miliseconds) (will show a pause for after number amount of time) shows nothing but a blank screen and the QUD if there is such fixation point step - a cross in the middle where the stimulus appears passed to the trial view as fix_duration: number (in miliseconds) shows a cross in the middle of the stimulus and the QUD if there is such stimulus shown step - stimulus appears 3.5 (optional) stimulus hidden step - hides the stimulus from the screen * hide the stimulus after certain amount of time by passing stim_duration: number (in miliseconds) to the view creation * hide the stimulus when SPACE gets pressed with stim_duration: 'space' * skip this step by not defining stim_duration interactions are enabled - the participant can interact with the view (respond, read the sentence etc.) The views you created do not need to use these timeouts, however, each trial view still goes through these steps on the background and you can still hook and call locally defined functions","title":"Life cycle"},{"location":"01_designing_experiments/04_lifecycles_hooks/#hooks","text":"You can create functions in your local js files and hook these functions to the trial view. To understand how hooks work, first learn about babe's trial views lifecycle Hooks after the pause is finished enable with hook.after_pause: _function_ after the fixation point hides enable with hook.after_fix_point: _function_ after the stimulus is shown enable with hook.after_stim_shown: _function_ after the stimulus hides enable with hook.after_stim_hidden: _function_ after the interactions are enabled enable with hook.after_response_enabled: _function_ Your custom functions get the trial data for each trial view and next as arguments. You can use the data if you need to. To proceed to the next step of the lifecycle, you have to call next() Full lifecycle - hook sample pause shows pause finishes after_pause function called fixation point shows fixation point disappears after_fix_point function called stimulus shows after_stim_shown function called stimlus hides after_stim_hidden function called response is enabled after_response_enabled function called Real example Imagine you want to tell the participants whether their repsonse was correct while they are getting familiar with the experiment, for example in the practice trial view. To do that you need to get the answer they chose and check it for correctness. You can define a funciton that gets their response and hook to the trial view after the response is enabled. In the example below, assume that option1 is always the correct answer. // compares the chosen answer to the value of `option1` function checkResponse(data, next) { $('input[name=answer]').on('change', function(e) { if (e.target.value === data.option1) { alert('Your answer is correct! Yey!'); } else { alert('Sorry, this answer is incorrect :('); } next(); }) } and add a after_response_enabled hook to the view: const practice = babeViews.forcedChoice({ trials: 20, name: 'practice', trial_type: 'practice', data: practice_trials.forcedChoice, fix_duration: 500, pause: 500, hook: { after_response_enabled: checkResponse } });","title":"Hooks"},{"location":"01_designing_experiments/05_canvas/","text":"Each babe trial type view can use the babe canvas api to create a picture of elements in the trial view. babe provides three types of element placement: random placement grid placement split grid placement How to use babe canvas To generate a picture of shapes, all you need is to have canvas object with some properties in the data your views use. For example: let trials = [ ..., { question: \"Are there any blue squares on the screen?\", option1: 'yes', option2: 'no', canvas: { focalColor: 'black', focalShape: 'circle', focalNumber: 23, otherShape: 'square', otherColor: 'red', sort: 'random', elemSize: 30, total: 40 } }, ... ]; Data format obligatory properties sort - the way the elements are arranged on the canvas. sort: 'random' - randomly placed on the canvas. start_with does not have an effect with this arrangement method; sort: 'grid' - placed in a grid. Uses canvas.canvas.rows ; sort: 'split_grid' - placed in a grid that is split in the middle. elemSize - the size of the element's shapes (in pixels). total - the total elements that are drawn on the canvas. focalColor - the color of the focal elements. focalNumber - the number of focal elements wanted on the canvas. focalShape - the shape of the foca elements (can be 'triangle', 'circle' or 'square') otherColor - the color of the other elements otherShape - the shape of the elements (can be 'triangle', 'circle' or 'square') The number of the other elements is total - focal.number optional properties Grid placement and split Grid Placement extra properties rows the number of grid rows. Placed in one row of not given. start_with - the grid and split_grid coordinates are generated from left to right. By default first the focal elements are placed on the canvas so they always appear on the left unless start_with is set to 'other' start_with: 'focal' : places the focal shapes first (from left to right) not set start_with places the focal shapes first (from left to right) start_with: 'other' : places the other shapes first (from left to right) Split Grid extra properties gap - the gap between the two sides. The default gap is 1.5 * elemSize direction - the direction in which the elements are placed. Set to 'row' if not given. 'row' - in a row, starting from left to right, ignoring the gap between the two sides; 'side_row' - in a row starting from left to right, not ignoring the gap, i.e. first finishes with the left side and then moves to the right; 'column' - in a column, starting from top left. canvas element settings You can add a canvasSettings object to your canvas if you want to set the height, width and background of the canvas. for example: canvas: { canvasSettings: { height: 600, width: 800, backrgound: 'grey' }, focalColor: 'black', focalShape: 'circle', focalNumber: 23, otherShape: 'square', otherColor: 'red', sort: 'random', elemSize: 30, total: 40 } If not passed the canvas's - height is 300 (300px) - width is 500 (500px) - background is 'white' Examples canvas: { canvasSettings: { background: 'grey' }, focalColor: 'black', focalShape: 'circle', focalNumber: 4, otherShape: 'circle', otherColor: 'white', sort: 'split_grid', rows: 4, direction: 'side_row', elemSize: 30, total: 10 } // gap is default (1.5 * elemSize) // start_with is default (focal elem) canvas: { canvasSettings: { height: 500, width: 700 }, focalColor: 'blue', focalShape: 'circle', focalNumber: 25, otherShape: 'circle', otherColor: 'green', sort: 'random', elemSize: 10, total: 100 } // the canvas size is increased to fit 100 elements canvas: { focalColor: 'red', focalShape: 'circle', focalNumber: 1, otherShape: 'triangle', otherColor: 'green', sort: 'random', elemSize: 30, total: 10 } canvas: { focalColor: 'red', focalShape: 'circle', focalNumber: 8, otherShape: 'triangle', otherColor: 'blue', sort: 'split_grid', start_with: 'other', rows: 2, direction: 'side_row', elemSize: 30, total: 16 } canvas: { focalColor: 'red', focalShape: 'circle', focalNumber: 8, otherShape: 'triangle', otherColor: 'blue', sort: 'split_grid', rows: 4, gap: 200, elemSize: 30, total: 16 } // the default direction is 'row' canvas: { focalColor: 'red', focalShape: 'circle', focalNumber: 10, otherShape: 'triangle', otherColor: 'blue', sort: 'split_grid', rows: 4, gap: 200, direction: 'column' elemSize: 30, total: 16 } // direction is default ('row') // start_with is default (focal elem) ``` canvas: { focalColor: 'grey', focalShape: 'circle', focalNumber: 6, otherShape: 'square', otherColor: 'blue', sort: 'grid', rows: 3, elemSize: 30, total: 18 } // start_with is default (focal elem)","title":"Canvas"},{"location":"01_designing_experiments/05_canvas/#how-to-use-babe-canvas","text":"To generate a picture of shapes, all you need is to have canvas object with some properties in the data your views use. For example: let trials = [ ..., { question: \"Are there any blue squares on the screen?\", option1: 'yes', option2: 'no', canvas: { focalColor: 'black', focalShape: 'circle', focalNumber: 23, otherShape: 'square', otherColor: 'red', sort: 'random', elemSize: 30, total: 40 } }, ... ];","title":"How to use babe canvas"},{"location":"01_designing_experiments/05_canvas/#data-format","text":"","title":"Data format"},{"location":"01_designing_experiments/05_canvas/#obligatory-properties","text":"sort - the way the elements are arranged on the canvas. sort: 'random' - randomly placed on the canvas. start_with does not have an effect with this arrangement method; sort: 'grid' - placed in a grid. Uses canvas.canvas.rows ; sort: 'split_grid' - placed in a grid that is split in the middle. elemSize - the size of the element's shapes (in pixels). total - the total elements that are drawn on the canvas. focalColor - the color of the focal elements. focalNumber - the number of focal elements wanted on the canvas. focalShape - the shape of the foca elements (can be 'triangle', 'circle' or 'square') otherColor - the color of the other elements otherShape - the shape of the elements (can be 'triangle', 'circle' or 'square') The number of the other elements is total - focal.number","title":"obligatory properties"},{"location":"01_designing_experiments/05_canvas/#optional-properties","text":"","title":"optional properties"},{"location":"01_designing_experiments/05_canvas/#grid-placement-and-split-grid-placement-extra-properties","text":"rows the number of grid rows. Placed in one row of not given. start_with - the grid and split_grid coordinates are generated from left to right. By default first the focal elements are placed on the canvas so they always appear on the left unless start_with is set to 'other' start_with: 'focal' : places the focal shapes first (from left to right) not set start_with places the focal shapes first (from left to right) start_with: 'other' : places the other shapes first (from left to right)","title":"Grid placement and split Grid Placement extra properties"},{"location":"01_designing_experiments/05_canvas/#split-grid-extra-properties","text":"gap - the gap between the two sides. The default gap is 1.5 * elemSize direction - the direction in which the elements are placed. Set to 'row' if not given. 'row' - in a row, starting from left to right, ignoring the gap between the two sides; 'side_row' - in a row starting from left to right, not ignoring the gap, i.e. first finishes with the left side and then moves to the right; 'column' - in a column, starting from top left.","title":"Split Grid extra properties"},{"location":"01_designing_experiments/05_canvas/#canvas-element-settings","text":"You can add a canvasSettings object to your canvas if you want to set the height, width and background of the canvas. for example: canvas: { canvasSettings: { height: 600, width: 800, backrgound: 'grey' }, focalColor: 'black', focalShape: 'circle', focalNumber: 23, otherShape: 'square', otherColor: 'red', sort: 'random', elemSize: 30, total: 40 } If not passed the canvas's - height is 300 (300px) - width is 500 (500px) - background is 'white'","title":"canvas element settings"},{"location":"01_designing_experiments/05_canvas/#examples","text":"canvas: { canvasSettings: { background: 'grey' }, focalColor: 'black', focalShape: 'circle', focalNumber: 4, otherShape: 'circle', otherColor: 'white', sort: 'split_grid', rows: 4, direction: 'side_row', elemSize: 30, total: 10 } // gap is default (1.5 * elemSize) // start_with is default (focal elem) canvas: { canvasSettings: { height: 500, width: 700 }, focalColor: 'blue', focalShape: 'circle', focalNumber: 25, otherShape: 'circle', otherColor: 'green', sort: 'random', elemSize: 10, total: 100 } // the canvas size is increased to fit 100 elements canvas: { focalColor: 'red', focalShape: 'circle', focalNumber: 1, otherShape: 'triangle', otherColor: 'green', sort: 'random', elemSize: 30, total: 10 } canvas: { focalColor: 'red', focalShape: 'circle', focalNumber: 8, otherShape: 'triangle', otherColor: 'blue', sort: 'split_grid', start_with: 'other', rows: 2, direction: 'side_row', elemSize: 30, total: 16 } canvas: { focalColor: 'red', focalShape: 'circle', focalNumber: 8, otherShape: 'triangle', otherColor: 'blue', sort: 'split_grid', rows: 4, gap: 200, elemSize: 30, total: 16 } // the default direction is 'row' canvas: { focalColor: 'red', focalShape: 'circle', focalNumber: 10, otherShape: 'triangle', otherColor: 'blue', sort: 'split_grid', rows: 4, gap: 200, direction: 'column' elemSize: 30, total: 16 } // direction is default ('row') // start_with is default (focal elem) ``` canvas: { focalColor: 'grey', focalShape: 'circle', focalNumber: 6, otherShape: 'square', otherColor: 'blue', sort: 'grid', rows: 3, elemSize: 30, total: 18 } // start_with is default (focal elem)","title":"Examples"},{"location":"01_designing_experiments/06_complex_experiments/","text":"","title":"Complex experiments"},{"location":"02_using_the_server_app/01_installation/","text":"Installation on Heroku The _babe server app can be hosted on any hosting service or your own server. We here describe the process for installation on Heroku . Heroku makes it easy to deploy an web app without having to manually manage the infrastructure. It has a free starter tier, which should be sufficient for the purpose of running experiments. There is an official guide on how to deploy the Phoenix framework on Heroku. The deployment procedure is based on this guide, but differs in some places. {:start=\"0\"} 0. Ensure that you have the Phoenix Framework installed and working. However, if you just want to deploy this server and do no development work/change on it at all, you may skip this step. Ensure that you have a Heroku account already, and have the Heroku CLI installed and working on your computer. Ensure you have Git installed. Clone this git repo with git clone https://github.com/babe-project/BABE or git clone git@github.com:babe-project/BABE.git . cd into the project directory just cloned from your Terminal (or cmd.exe on Windows). Run heroku create --buildpack \"https://github.com/HashNuke/heroku-buildpack-elixir.git\" Run heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git (N.B.: Although the command line output tells you to run git push heroku master , don't do it yet.) You may want to change the application name instead of using the default name. In that case, run heroku apps:rename newname . Edit line 17 of the file config/prod.exs . Replace the part babe-backend.herokuapp.com after host with the app name (shown when you first ran heroku create , e.g. mysterious-meadow-6277.herokuapp.com , or the app name that you set at step 6, e.g. newname.herokuapp.com ). You shouldn't need to modify anything else. Ensure that you're at the top-level project directory. Run heroku addons:create heroku-postgresql:hobby-dev heroku config:set POOL_SIZE=18 Run mix deps.get then mix phx.gen.secret . Then run heroku config:set SECRET_KEY_BASE=\"OUTPUT\" , where OUTPUT should be the output of the mix phx.gen.secret step. Note: If you don't have the Phoenix framework installed on your computer, you may choose to use some other random generator for this task, which essentially asks for a random 64-character secret. On Mac and Linux, you may run openssl rand -base64 64 . Or you may use an online password generator such as the one offered by LastPass . Run git add config/prod.exs , then git commit -m \"Set app URL\" . Don't forget to set the environment variables AUTH_USERNAME and AUTH_PASSWORD , either in the Heroku web interface or via the command line, i.e. heroku config:set AUTH_USERNAME=\"your_username\" heroku config:set AUTH_PASSWORD=\"your_password\" Run git push heroku master . This will push the repo to the git remote at Heroku (instead of the original remote at Github), and deploy the app. Run heroku run \"POOL_SIZE=2 mix ecto.migrate\" Now, heroku open should open the frontpage of the app. Installation locally The first-time installation requires an internet connection. After it is finished, the server can be launched offline. (Note that for local deployment, the default username is default and the default password is password . You can change them in config/dev.exs .) First time installation To begin with, install Docker from https://docs.docker.com/install/ . You may have to launch the application once in order to let it install its command line tools. Verify the installation by typing docker version in a terminal (e.g., the Terminal app on MacOS or cmd.exe on Windows). Note: - Although the Docker app on Windows and Mac asks for login credentials to Docker Hub, they are not needed for local deployment. You can proceed without creating any Docker account/logging in. - Linux users would need to install docker-compose separately. See relevant instructions here . Once you have Docker installed, follow these steps: Ensure you have Git installed. Clone the server repo with git clone https://github.com/babe-project/BABE.git or git clone git@github.com:babe-project/BABE.git . Open a terminal (e.g., the Terminal app on MacOS or cmd.exe on Windows), cd into the project directory just cloned via git. For the first-time setup, run in the terminal docker volume create --name babe-app-volume -d local docker volume create --name babe-db-volume -d local docker-compose run --rm web bash -c \"mix deps.get && npm install && node node_modules/brunch/bin/brunch build && mix ecto.migrate\" Deployment After first-time installation, you can launch a local server instance which allows you to manage the experiments in your browser and stores the results. Run docker-compose up to launch the application every time you want to run the server. Wait until the line web_1 | [info] Running BABE.Endpoint with Cowboy using http://0.0.0.0:4000 appears in the terminal. Visit localhost:4000 in your browser. You should see the server up and running. Note: Windows 7 users who installed Docker Machine might need to find out the IP address used by docker-machine instead of localhost . See Docker documentation for details. Use Ctrl + C to shut down the server. Note that the database for storing experiment results is stored at /var/lib/docker/volumes/babe-db-volume/_data folder by default. As long as this folder is preserved, experiment results should persist as well.","title":"Installation"},{"location":"02_using_the_server_app/01_installation/#installation-on-heroku","text":"The _babe server app can be hosted on any hosting service or your own server. We here describe the process for installation on Heroku . Heroku makes it easy to deploy an web app without having to manually manage the infrastructure. It has a free starter tier, which should be sufficient for the purpose of running experiments. There is an official guide on how to deploy the Phoenix framework on Heroku. The deployment procedure is based on this guide, but differs in some places. {:start=\"0\"} 0. Ensure that you have the Phoenix Framework installed and working. However, if you just want to deploy this server and do no development work/change on it at all, you may skip this step. Ensure that you have a Heroku account already, and have the Heroku CLI installed and working on your computer. Ensure you have Git installed. Clone this git repo with git clone https://github.com/babe-project/BABE or git clone git@github.com:babe-project/BABE.git . cd into the project directory just cloned from your Terminal (or cmd.exe on Windows). Run heroku create --buildpack \"https://github.com/HashNuke/heroku-buildpack-elixir.git\" Run heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git (N.B.: Although the command line output tells you to run git push heroku master , don't do it yet.) You may want to change the application name instead of using the default name. In that case, run heroku apps:rename newname . Edit line 17 of the file config/prod.exs . Replace the part babe-backend.herokuapp.com after host with the app name (shown when you first ran heroku create , e.g. mysterious-meadow-6277.herokuapp.com , or the app name that you set at step 6, e.g. newname.herokuapp.com ). You shouldn't need to modify anything else. Ensure that you're at the top-level project directory. Run heroku addons:create heroku-postgresql:hobby-dev heroku config:set POOL_SIZE=18 Run mix deps.get then mix phx.gen.secret . Then run heroku config:set SECRET_KEY_BASE=\"OUTPUT\" , where OUTPUT should be the output of the mix phx.gen.secret step. Note: If you don't have the Phoenix framework installed on your computer, you may choose to use some other random generator for this task, which essentially asks for a random 64-character secret. On Mac and Linux, you may run openssl rand -base64 64 . Or you may use an online password generator such as the one offered by LastPass . Run git add config/prod.exs , then git commit -m \"Set app URL\" . Don't forget to set the environment variables AUTH_USERNAME and AUTH_PASSWORD , either in the Heroku web interface or via the command line, i.e. heroku config:set AUTH_USERNAME=\"your_username\" heroku config:set AUTH_PASSWORD=\"your_password\" Run git push heroku master . This will push the repo to the git remote at Heroku (instead of the original remote at Github), and deploy the app. Run heroku run \"POOL_SIZE=2 mix ecto.migrate\" Now, heroku open should open the frontpage of the app.","title":"Installation on Heroku"},{"location":"02_using_the_server_app/01_installation/#installation-locally","text":"The first-time installation requires an internet connection. After it is finished, the server can be launched offline. (Note that for local deployment, the default username is default and the default password is password . You can change them in config/dev.exs .)","title":"Installation locally"},{"location":"02_using_the_server_app/01_installation/#first-time-installation","text":"To begin with, install Docker from https://docs.docker.com/install/ . You may have to launch the application once in order to let it install its command line tools. Verify the installation by typing docker version in a terminal (e.g., the Terminal app on MacOS or cmd.exe on Windows). Note: - Although the Docker app on Windows and Mac asks for login credentials to Docker Hub, they are not needed for local deployment. You can proceed without creating any Docker account/logging in. - Linux users would need to install docker-compose separately. See relevant instructions here . Once you have Docker installed, follow these steps: Ensure you have Git installed. Clone the server repo with git clone https://github.com/babe-project/BABE.git or git clone git@github.com:babe-project/BABE.git . Open a terminal (e.g., the Terminal app on MacOS or cmd.exe on Windows), cd into the project directory just cloned via git. For the first-time setup, run in the terminal docker volume create --name babe-app-volume -d local docker volume create --name babe-db-volume -d local docker-compose run --rm web bash -c \"mix deps.get && npm install && node node_modules/brunch/bin/brunch build && mix ecto.migrate\"","title":"First time installation"},{"location":"02_using_the_server_app/01_installation/#deployment","text":"After first-time installation, you can launch a local server instance which allows you to manage the experiments in your browser and stores the results. Run docker-compose up to launch the application every time you want to run the server. Wait until the line web_1 | [info] Running BABE.Endpoint with Cowboy using http://0.0.0.0:4000 appears in the terminal. Visit localhost:4000 in your browser. You should see the server up and running. Note: Windows 7 users who installed Docker Machine might need to find out the IP address used by docker-machine instead of localhost . See Docker documentation for details. Use Ctrl + C to shut down the server. Note that the database for storing experiment results is stored at /var/lib/docker/volumes/babe-db-volume/_data folder by default. As long as this folder is preserved, experiment results should persist as well.","title":"Deployment"},{"location":"02_using_the_server_app/02_use/","text":"After installation you can visit the server app in a browser, with the username and password you previously specified. For Heroku deployment, you may do so by running heroku open in the command line or find the app URL in your Heroku account. For local deployment, the URL is by default http://localhost:4000. The server app shows a list of experiments whose data may be stored in a database. It shows the experiments ID, its name, its author, the number of submissions retrieved so far, date information, as well as whether the experiment is currently active or not. If an experiment is set to be active, it allows further submissions to be recorded in the database. The server app allows you to retrieve the data for an experiment from the database. Simply click on the button \"Retrieve CSV\" to download a CSV-file with the data collected so far. To delete an experiment, click the \"Delete\" button. Always make sure that you have recovered all necessary data from that experiment; otherwise your data collected so far might be irrevocably lost. You can also edit an experiment with the \"Edit\" button. You can change information about the experiment on the edit-screen. You can also toggle whether the experiment is active or not. You can set a maximum number of submissions after which the experiment automatically toggles its activity status off. Any submission made by a participant to a non-active experiment is just lost and will not be recorded. This is to protect your database from pollution or attacks, but if used unwisely could also cause you loss of relevant data. Finally, the server app allows you to create and manage new experiments. Click on the \"New\" button to do this. The interface for creating a new experiment is parallel to editing an existing experiment. Importantly, you need to give some required information about a new experiment (name and author). If you want to use dynamic retrieval of experiment data (documented here ), you must specify which fields should be available to be retrieved by your API calls. This allows you to expose only the relevant fields, since the dynamic retrieval API is not password protected by default.","title":"Use"},{"location":"03_deploying_experiments/01_hosting_on_netlify/","text":"Deployment using Netlify Deployment using Netlify Registration Go to https://www.netlify.com/ and sign up using GitHub Deployment Using git: Click on the New site from Git -Button, choose GitHub and authorize the netlify-app on GitHub, configure which repositories to give access to, (back on netlify) select the repository to deploy, enter the build command rm -rf dist && mkdir dist && rsync -rv * dist --exclude ./dist and the publish directory dist (this is a workaround for publishing node_modules , see here , another way of bundling the files may be appropriate), click on Deploy site Manual: Go to https://app.netlify.com/ and drag and drop your finished experiment folder (including node_modules) to the drag&drop area Configuration Change the domain name: Click on the deployed site you want to configure, click on Domain setting , click on Edit site name and change to the name of choice.","title":"Hosting on netlify"},{"location":"03_deploying_experiments/01_hosting_on_netlify/#deployment-using-netlify","text":"Registration Go to https://www.netlify.com/ and sign up using GitHub Deployment Using git: Click on the New site from Git -Button, choose GitHub and authorize the netlify-app on GitHub, configure which repositories to give access to, (back on netlify) select the repository to deploy, enter the build command rm -rf dist && mkdir dist && rsync -rv * dist --exclude ./dist and the publish directory dist (this is a workaround for publishing node_modules , see here , another way of bundling the files may be appropriate), click on Deploy site Manual: Go to https://app.netlify.com/ and drag and drop your finished experiment folder (including node_modules) to the drag&drop area Configuration Change the domain name: Click on the deployed site you want to configure, click on Domain setting , click on Edit site name and change to the name of choice.","title":"Deployment using Netlify"}]}